import com.github.spotbugs.snom.Effort

plugins {
    id 'org.springframework.boot' version '3.2.1'
    id 'io.spring.dependency-management' version '1.1.4'
    id 'java'
    id 'idea'    // optional, for IntelliJ IDEA project
    id 'jacoco'
    id 'checkstyle'
    id 'com.github.spotbugs' version '6.0.6'
    id 'pmd'
    id 'org.owasp.dependencycheck' version '8.2.1'
    id "com.gorylenko.gradle-git-properties" version "2.4.0"
    id "com.github.ben-manes.versions" version "0.42.0"
    id "nebula.lint" version "17.7.0"
}

group = appGroup

ext {
    jacocoInstructionCoverageMinimum = 0.10
    jacocoLineCoverageMinimum = 0.10
    jacocoMethodCoverageMinimum = 0.10
    jacocoClassCoverageMinimum = 0.10
    jacocoBranchCoverageMinimum = 0.10
    jacocoComplexityCoverageMinimum = 0.10
}

sourceSets {
    integrationTest {
        java.srcDir 'src/it/java'
        resources.srcDir 'src/it/resources'
        compileClasspath += sourceSets.main.output + sourceSets.test.output + sourceSets.test.compileClasspath
        runtimeClasspath += sourceSets.integrationTest.output + sourceSets.integrationTest.compileClasspath  + sourceSets.test.runtimeClasspath
    }
}

java {
    sourceCompatibility = '21'
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenLocal()
    mavenCentral()
    maven { url 'https://repo.spring.io/milestone' }
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:2023.0.0"
    }
}

dependencies {

    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    runtimeOnly 'org.postgresql:postgresql'

    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
    annotationProcessor 'org.projectlombok:lombok'

    implementation 'org.projectlombok:lombok'

    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-data-rest'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.liquibase:liquibase-core'

    testAnnotationProcessor 'org.projectlombok:lombok:'

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.boot:spring-boot-testcontainers'
    testImplementation 'org.testcontainers:postgresql'

    testImplementation 'org.testcontainers:junit-jupiter'
    testImplementation 'org.junit.jupiter:junit-jupiter'
    testImplementation 'org.junit.jupiter:junit-jupiter-api'
    testImplementation 'org.junit.jupiter:junit-jupiter-engine'
    testImplementation 'org.junit.jupiter:junit-jupiter-params'

    testImplementation 'nl.jqno.equalsverifier:equalsverifier:3.15.3'
    testImplementation 'org.mockito:mockito-junit-jupiter:5.7.0'

    integrationTestAnnotationProcessor 'org.projectlombok:lombok'
    integrationTestAnnotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'


    integrationTestImplementation 'org.projectlombok:lombok'

    integrationTestImplementation 'org.junit.platform:junit-platform-runner'
    integrationTestImplementation 'org.junit.jupiter:junit-jupiter-params'
    integrationTestImplementation 'org.junit.jupiter:junit-jupiter-api'
    integrationTestImplementation 'org.junit.jupiter:junit-jupiter-engine'
    integrationTestImplementation 'org.junit.jupiter:junit-jupiter'
    integrationTestImplementation 'org.springframework.boot:spring-boot-starter-test'
    integrationTestImplementation 'org.springframework.boot:spring-boot-starter-web'
    integrationTestImplementation 'org.springframework.boot:spring-boot-starter-json'
    integrationTestImplementation 'org.springframework.cloud:spring-cloud-starter-contract-verifier'
    integrationTestImplementation 'org.springframework.cloud:spring-cloud-stream-test-binder'

    integrationTestImplementation 'org.testcontainers:junit-jupiter'
    integrationTestImplementation 'org.testcontainers:postgresql'

}

java{
    sourceCompatibility = '21'
    targetCompatibility = '21'
}

compileJava {
    options.compilerArgs += ['-Xlint:all']
    options.encoding = 'UTF-8'
}

compileTestJava {
    options.compilerArgs += ['-Xlint:all']
    options.encoding = 'UTF-8'
}

bootJar {
    archiveBaseName = appName
    archiveVersion = appVersion
    manifest {
        attributes(
                'Implementation-Title': appName,
                'Implementation-Version': appVersion
        )
    }
}

springBoot  {
    buildInfo{
        properties {
            group = appGroup
            name = appName
            version = appVersion
            additional = [
                    'java.version': JavaVersion.current(),
                    'spring-boot.version': '3.2.1',
                    'spring-cloud.version': '2023.0.0'
            ]
        }
    }
}

bootBuildImage{
    imageName='customer/customer'
}

checkstyle {
    toolVersion checkstyleToolVersion
    showViolations false
    configFile = file('code-styles/google-checkstyle.xml')
}

spotbugs {
    toolVersion = spotBugsToolVersion
    ignoreFailures = true
    effort = Effort.MAX
    showProgress = false
}

spotbugsMain {
    reports {
        html {
            required = true
            stylesheet = 'fancy-hist.xsl'
            outputLocation = file("build/reports/spotbugs/spotbugs.html")
        }
        xml {
            required = true
            outputLocation = file("build/reports/spotbugs/spotbugs.xml")
        }
    }
}

spotbugsTest {
    reports {
        html {
            required = true
            stylesheet = 'fancy-hist.xsl'
            outputLocation = file("build/reports/spotbugs/spotbugsTest.html")
        }
    }
}

spotbugsIntegrationTest {
    reports {
        html {
            required = true
            stylesheet = 'fancy-hist.xsl'
            outputLocation = file("build/reports/spotbugs/spotbugsIntegrationTest.html")
        }
    }
}

pmd {
    toolVersion = '7.0.0-rc4'
    consoleOutput = false
    ignoreFailures = true
    incrementalAnalysis = true
}

dependencyCheck {
    autoUpdate = true
    failOnError = false
    formats = ['XML', 'HTML']
    analyzers {
        assemblyEnabled = false
    }
    outputDirectory = "build/reports/security-report"
}

gradleLint {
    alwaysRun = false
    rules = ['all-dependency']
    reportFormat = 'xml'
}

jacoco {
    toolVersion = jacocoToolVersion
}

jacocoTestReport {
    reports {
        html{
            required = true
        }
        xml{
            required = true
            outputLocation = file("build/reports/jacoco/test/jacoco-report.xml")
        }
    }
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            enabled = true

            element = 'BUNDLE'
            excludes = ['*It.class', '*It.java']
            limit {
                counter = 'INSTRUCTION'
                value = 'COVEREDRATIO'
                minimum = jacocoInstructionCoverageMinimum
            }
            limit {
                counter = 'LINE'
                value = 'COVEREDRATIO'
                minimum = jacocoLineCoverageMinimum
            }
            limit {
                counter = 'METHOD'
                value = 'COVEREDRATIO'
                minimum = jacocoMethodCoverageMinimum
            }
            limit {
                counter = 'CLASS'
                value = 'COVEREDRATIO'
                minimum = jacocoClassCoverageMinimum
            }
            limit {
                counter = 'BRANCH'
                value = 'COVEREDRATIO'
                minimum = jacocoBranchCoverageMinimum
            }
            limit {
                counter = 'COMPLEXITY'
                value = 'COVEREDRATIO'
                minimum = jacocoComplexityCoverageMinimum
            }
        }
    }
}

test {
    useJUnitPlatform()
    check.dependsOn jacocoTestCoverageVerification
    finalizedBy jacocoTestReport
    testLogging {
        exceptionFormat = 'full'
        showExceptions true
        showCauses true
        showStackTraces true
        events 'passed', "skipped", 'failed', 'standardError', 'standardOut'
    }
    jacoco {
        enabled = true
        ignoreFailures = false
    }
    afterSuite { desc, result ->
        if (!desc.parent) {
            println "\nUnit Test result: ${result.resultType}"
            println "Test summary: ${result.testCount} tests, " +
                    "${result.successfulTestCount} succeeded, " +
                    "${result.failedTestCount} failed, " +
                    "${result.skippedTestCount} skipped"
        }
    }
}

task integrationTest(type: Test) {
    useJUnitPlatform()
    minHeapSize = "512m" // initial heap size
    maxHeapSize = "1024m" // maximum heap size
    description = 'Runs the integration tests.'
    group = 'verification'
    classpath = sourceSets.integrationTest.runtimeClasspath
    testClassesDirs = sourceSets.integrationTest.output.classesDirs
    outputs.upToDateWhen { false }
    mustRunAfter test
    check.dependsOn integrationTest // if you only want unit test, comment
    //dependsOn jar

    testLogging {
        exceptionFormat = 'full'
        showExceptions true
        showCauses true
        showStackTraces true
        events 'passed', "skipped", 'failed'
    }

    afterSuite { desc, result ->
        if (!desc.parent) {
            println "\nIntegration Test result: ${result.resultType}"
            println "Test summary: ${result.testCount} tests, " +
                    "${result.successfulTestCount} succeeded, " +
                    "${result.failedTestCount} failed, " +
                    "${result.skippedTestCount} skipped"
        }
    }
}
